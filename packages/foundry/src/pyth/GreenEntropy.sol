// SPDX-License-Identifier: MIT
pragma solidity 0.8.30;
 
import { IEntropyConsumer } from "@pythnetwork/entropy-sdk-solidity/IEntropyConsumer.sol";
import { IEntropy } from "@pythnetwork/entropy-sdk-solidity/IEntropy.sol";
import { GreenErrors } from '../shared/GreenErrors.sol';
import { GreenEvents } from '../shared/GreenEvents.sol';
 
contract GreenEntropy is IEntropyConsumer {
  IEntropy entropy;
  mapping (address => mapping(uint64 => uint256)) private sequenceNumbers;
 
  // @param entropyAddress The address of the entropy contract.
  constructor(address entropyAddress) {
    entropy = IEntropy(entropyAddress);
  }
 
  // @param userRandomNumber The random number generated by the user.
  function requestRandomNumber(bytes32 userRandomNumber, uint256 maxNumber) external payable {
    // Get the default provider and the fee for the request
    address entropyProvider = entropy.getDefaultProvider();
    uint256 fee = entropy.getFee(entropyProvider);
 
    // Request the random number with the callback
    uint64 sequenceNumber = entropy.requestWithCallback{ value: fee }(
      entropyProvider,
      userRandomNumber
    );

    sequenceNumbers[entropyProvider][sequenceNumber] = maxNumber;

    emit GreenEvents.RandomNumberRequested(sequenceNumber, userRandomNumber);
  }
 
  // @param sequenceNumber The sequence number of the request.
  // @param provider The address of the provider that generated the random number. If your app uses multiple providers, you can use this argument to distinguish which one is calling the app back.
  // @param randomNumber The generated random number.
  // This method is called by the entropy contract when a random number is generated.
  // This method **must** be implemented on the same contract that requested the random number.
  // This method should **never** return an error -- if it returns an error, then the keeper will not be able to invoke the callback.
  // If you are having problems receiving the callback, the most likely cause is that the callback is erroring.
  // See the callback debugging guide here to identify the error https://docs.pyth.network/entropy/debug-callback-failures
  function entropyCallback(
    uint64 sequenceNumber,
    address provider,
    bytes32 randomNumber
  ) internal override {

    if (sequenceNumbers[provider][sequenceNumber] == 0) {
        revert GreenErrors.InvalidSequenceNumber();
    }

    uint256 generatedRandomNumber = mapRandomNumber(randomNumber, provider, sequenceNumber);

    emit GreenEvents.RandomNumberGenerated(sequenceNumber, generatedRandomNumber);

  }

    function mapRandomNumber(
    bytes32 randomNumber,
    address entropyProvider,
    uint64 sequenceNumber
    ) internal view returns (uint256) {
    uint256 range = uint256(sequenceNumbers[entropyProvider][sequenceNumber] + 1);
    return uint256(uint256(randomNumber) % range);
    }
 
  // This method is required by the IEntropyConsumer interface.
  // It returns the address of the entropy contract which will call the callback.
  function getEntropy() internal view override returns (address) {
    return address(entropy);
  }
}
 